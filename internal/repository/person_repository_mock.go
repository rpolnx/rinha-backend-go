// Code generated by mockery v2.35.4. DO NOT EDIT.

package repository

import (
	uuid "github.com/google/uuid"
	model "github.com/rpolnx/rinha-backend-go/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PersonRepositoryMock is an autogenerated mock type for the PersonRepository type
type PersonRepositoryMock struct {
	mock.Mock
}

// CountAllDbPeople provides a mock function with given fields:
func (_m *PersonRepositoryMock) CountAllDbPeople() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllPeople provides a mock function with given fields: query
func (_m *PersonRepositoryMock) FindAllPeople(query string) ([]model.PersonEntity, error) {
	ret := _m.Called(query)

	var r0 []model.PersonEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.PersonEntity, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []model.PersonEntity); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PersonEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPersonById provides a mock function with given fields: id
func (_m *PersonRepositoryMock) FindPersonById(id uuid.UUID) (*model.PersonEntity, error) {
	ret := _m.Called(id)

	var r0 *model.PersonEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.PersonEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.PersonEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PersonEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPerson provides a mock function with given fields: entity
func (_m *PersonRepositoryMock) InsertPerson(entity *model.PersonEntity) (uuid.UUID, error) {
	ret := _m.Called(entity)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.PersonEntity) (uuid.UUID, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(*model.PersonEntity) uuid.UUID); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.PersonEntity) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPersonRepositoryMock creates a new instance of PersonRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonRepositoryMock {
	mock := &PersonRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
